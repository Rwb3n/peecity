{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(npm test:*)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(timeout 10 npm run dev)",
      "Bash(npm install:*)",
      "Bash(npm view:*)",
      "Bash(npm search:*)",
      "Bash(rm:*)",
      "Bash(npm run test:coverage:*)",
      "Bash(npm run lint)",
      "Bash(node:*)",
      "Bash(sed:*)",
      "Bash(grep:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:github.com)",
      "Bash(chmod:*)",
      "Bash(claude mcp)",
      "Bash(claude mcp:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_install",
      "Bash(npm run:*)",
      "Bash(npx tsx scripts/ingest-cli.ts run:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(touch:*)",
      "WebFetch(domain:overpass-api.de)",
      "Bash(npx tsx:*)",
      "Bash(mv:*)",
      "Bash(timeout 15s npx storybook dev -p 6006)",
      "Bash(timeout:*)",
      "Bash(npx tsc:*)",
      "Bash(npm add:*)",
      "Bash(cp:*)",
      "Bash(npx jest:*)",
      "Bash(jq:*)",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js)",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js -t \"should accept minimal v1 submission with defaults\")",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js -t \"should return 400 when core properties are missing\")",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js -t \"should accept valid high-frequency properties\")",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js -t \"should handle optional properties with lenient validation\")",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js -t \"should accept invalid specialized properties\")",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js -t \"should maintain v1 API compatibility\")",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js -t \"should handle all 120 properties\")",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js -t \"(should maintain v1|should return structured validation errors)\")",
      "Bash(NODE_ENV=test npm test -- tests/integration/suggest_tier_validation_test.js -t \"should return structured validation errors\")",
      "Bash(npx eslint:*)",
      "Bash(NODE_ENV=production npm test -- tests/performance/validation_benchmark_test.js --testNamePattern=\"minimal properties within\")",
      "Bash(echo:*)",
      "Bash(CI=true npm test tests/performance/validation_benchmark_test.js)",
      "Bash(npx nyc --reporter=text-summary npm test -- tests/services/TieredValidationService_optimized_test.js tests/utils/errorMessages_test.js tests/performance/optimization_comparison_test.js)",
      "Bash(npx nyc --reporter=text npm test:*)",
      "Bash(npx nyc report:*)",
      "Bash(for:*)",
      "Bash(do if ! grep -q \"^---\" \"$file\")",
      "Bash(then echo \"Missing front-matter: $file\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(! grep -q \"^---\" \"$file\")",
      "Bash(then echo \"$file\")",
      "Bash(true)",
      "Bash(npm uninstall:*)",
      "Bash(pkill:*)",
      "Bash(npx storybook:*)",
      "Bash(killall:*)",
      "Bash(npm ls:*)",
      "Bash(npm audit:*)",
      "Bash(jest --version)",
      "Bash(./node_modules/.bin/jest:*)",
      "Bash(git checkout:*)",
      "Bash(cd \"D:\\PROJECTS\\peecity\")"
    ],
    "deny": []
  }
}
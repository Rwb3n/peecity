#!/usr/bin/env node
/**
 * Git Hooks Setup Script
 * 
 * @artifact: docs/engineering-spec.md#documentation-standards
 * @task: docs_git_hooks_setup
 * @tdd-phase: GREEN
 * @pattern-type: Development Workflow
 * @complexity: Beginner
 * @audience: Developers
 * 
 * Sets up Git pre-commit hooks for documentation linting
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const HOOK_CONTENT = `#!/bin/sh
#
# Pre-commit hook for documentation linting
# Generated by scripts/setup-git-hooks.js
#

echo "üîç Running documentation lint on staged files..."

# Get staged .md files in docs/ directory
STAGED_MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '^docs/.*\\.md$' || true)

if [ -z "$STAGED_MD_FILES" ]; then
  echo "‚úÖ No documentation files staged, skipping lint"
  exit 0
fi

# Run docs linting on changed files only
npm run lint:docs:ci

if [ $? -ne 0 ]; then
  echo ""
  echo "‚ùå Documentation linting failed!"
  echo "üí° Run 'npm run lint:docs:verbose' to see detailed errors"
  echo "üí° Run 'npm run lint:docs:fix' to auto-fix issues (where possible)"
  echo ""
  echo "To skip this check (not recommended), use: git commit --no-verify"
  exit 1
fi

echo "‚úÖ Documentation linting passed"
`;

/**
 * Setup pre-commit hook
 */
function setupPreCommitHook() {
  try {
    // Check if we're in a git repository
    try {
      execSync('git rev-parse --git-dir', { stdio: 'pipe' });
    } catch (error) {
      console.log('‚ö†Ô∏è  Not in a git repository, skipping hook setup');
      return false;
    }

    // Get git hooks directory
    const gitDir = execSync('git rev-parse --git-dir', { encoding: 'utf8' }).trim();
    const hooksDir = path.join(gitDir, 'hooks');
    const preCommitPath = path.join(hooksDir, 'pre-commit');

    // Ensure hooks directory exists
    if (!fs.existsSync(hooksDir)) {
      fs.mkdirSync(hooksDir, { recursive: true });
    }

    // Check if pre-commit hook already exists
    if (fs.existsSync(preCommitPath)) {
      const existing = fs.readFileSync(preCommitPath, 'utf8');
      if (existing.includes('Documentation linting')) {
        console.log('‚úÖ Documentation linting pre-commit hook already installed');
        return true;
      }
      
      console.log('‚ö†Ô∏è  Pre-commit hook exists but does not include documentation linting');
      console.log('   Manual integration required:');
      console.log('   Add the following to your pre-commit hook:');
      console.log('');
      console.log('   # Documentation linting');
      console.log('   npm run lint:docs:ci || exit 1');
      console.log('');
      return false;
    }

    // Install the hook
    fs.writeFileSync(preCommitPath, HOOK_CONTENT);
    fs.chmodSync(preCommitPath, '755');

    console.log('‚úÖ Pre-commit hook installed successfully');
    console.log('   Documentation will be linted automatically on commit');
    console.log('   Use --no-verify to skip if needed (not recommended)');
    
    return true;

  } catch (error) {
    console.error('‚ùå Failed to setup pre-commit hook:', error.message);
    return false;
  }
}

/**
 * Create .gitignore entries for cache
 */
function setupGitIgnore() {
  const gitignorePath = path.join(__dirname, '../.gitignore');
  const cacheEntry = '.cache/docs-lint-cache.json';
  
  try {
    let gitignoreContent = '';
    if (fs.existsSync(gitignorePath)) {
      gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
    }

    if (!gitignoreContent.includes(cacheEntry)) {
      gitignoreContent += gitignoreContent.endsWith('\n') ? '' : '\n';
      gitignoreContent += '# Documentation linting cache\n';
      gitignoreContent += cacheEntry + '\n';
      
      fs.writeFileSync(gitignorePath, gitignoreContent);
      console.log('‚úÖ Added cache entry to .gitignore');
    } else {
      console.log('‚úÖ Cache entry already in .gitignore');
    }
    
    return true;
  } catch (error) {
    console.error('‚ö†Ô∏è  Failed to update .gitignore:', error.message);
    return false;
  }
}

/**
 * Main setup function
 */
function main() {
  console.log('üîß Setting up Git hooks for documentation linting...');
  
  const hookSuccess = setupPreCommitHook();
  const gitignoreSuccess = setupGitIgnore();
  
  if (hookSuccess && gitignoreSuccess) {
    console.log('');
    console.log('üéâ Git hooks setup completed successfully!');
    console.log('');
    console.log('Available commands:');
    console.log('  npm run lint:docs          - Lint all documentation');
    console.log('  npm run lint:docs:verbose  - Lint with detailed output');
    console.log('  npm run lint:docs:ci       - Lint changed files (CI mode)');
    console.log('  npm run lint:docs:fix      - Auto-fix issues (where possible)');
  } else {
    console.log('');
    console.log('‚ö†Ô∏è  Setup completed with warnings. Manual configuration may be required.');
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  setupPreCommitHook,
  setupGitIgnore
};
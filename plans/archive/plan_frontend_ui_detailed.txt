{
  "id": "frontend_ui_detailed",
  "goal": "Deliver mobile-first Next.js frontend with interactive map, toilet discovery, and contribution flow following strict TDD and atomic design principles",
  "user_stories": [
    {
      "id": "US001",
      "title": "As a mobile user, I want to see a map with toilet locations so I can quickly find the nearest toilet",
      "acceptance_criteria": [
        "Map loads within 3 seconds on 3G mobile",
        "Shows 1,041+ London toilet markers with clustering",
        "Map controls positioned in thumb-friendly bottom-right zone",
        "User location displayed with distinctive blue dot",
        "Markers color-coded by availability (green=open, yellow=closing, gray=closed)"
      ]
    },
    {
      "id": "US002", 
      "title": "As a user in a hurry, I want to tap a toilet marker and see essential details so I can decide if it meets my needs",
      "acceptance_criteria": [
        "Marker popup shows: name, hours, accessibility, fee, distance",
        "Popup includes 'Get Directions' button linking to maps app",
        "Information displays clearly on small mobile screens",
        "Popup can be dismissed with single tap outside"
      ]
    },
    {
      "id": "US003",
      "title": "As a community member, I want to suggest missing toilets so others can benefit from my local knowledge", 
      "acceptance_criteria": [
        "Floating Action Button (FAB) always visible in bottom-right",
        "FAB opens contribution modal with form fields",
        "Form detects current location or allows manual placement",
        "Successful submission shows confirmation toast",
        "Form validates required fields with helpful error messages"
      ]
    },
    {
      "id": "US004",
      "title": "As a user with accessibility needs, I want the interface to be fully accessible so I can navigate independently",
      "acceptance_criteria": [
        "WCAG 2.1 AA compliance verified",
        "Full keyboard navigation support",
        "Screen reader compatibility with proper ARIA labels",
        "High contrast mode support",
        "Touch targets minimum 44px with 48px preferred"
      ]
    },
    {
      "id": "US005",
      "title": "As a user on slow mobile connection, I want the app to load quickly and work offline so I'm not left stranded",
      "acceptance_criteria": [
        "Initial page load under 3 seconds on 3G",
        "Progressive loading of map tiles and markers",
        "Graceful degradation when offline",
        "Essential features work with cached data",
        "Loading states provide clear feedback"
      ]
    }
  ],
  "tasks": [
    {
      "id": "setup_environment",
      "type": "SETUP",
      "description": "Verify existing environment and install missing dependencies for the frontend UI epic.",
      "user_story_ref": "Infrastructure",
      "dependencies": [],
      "external_dependencies": [
        "@storybook/addon-a11y@^8.1.0",
        "@tanstack/react-query@^4.36.1",
        "zustand@^4.4.7",
        "react-leaflet-markercluster@^3.0.0"
      ],
      "confidence_level": "High",
      "confidence_justification": "Installing a small number of missing dependencies into an existing setup."
    },
    {
      "id": "atoms_jest_test_creation",
      "type": "TEST_CREATION",
      "description": "Create failing Jest/RTL tests for atomic design Level 1 components: Button, Input, Icon, Badge, covering mobile ergonomics, accessibility, and variants.",
      "user_story_ref": "US004",
      "dependencies": ["setup_environment"],
      "external_dependencies": ["Jest", "@testing-library/react", "@testing-library/user-event"],
      "confidence_level": "High",
      "confidence_justification": "Atomic components have well-defined interfaces and testable behaviors",
      "status": "DONE",
      "test_files": [
        "tests/components/atoms/Button_test.tsx",
        "tests/components/atoms/Input_test.tsx",
        "tests/components/atoms/Icon_test.tsx",
        "tests/components/atoms/Badge_test.tsx"
      ],
      "expected_test_failures": [
        "Button component not found",
        "Touch target size validation fails",
        "Accessibility attributes missing"
      ]
    },
    {
      "id": "atoms_storybook_creation",
      "type": "TEST_CREATION",
      "description": "Create placeholder Storybook stories for atomic design Level 1 components (Button, Input, Icon, Badge) to establish the visual test harness. Stories will initially fail to render.",
      "user_story_ref": "US004",
      "dependencies": ["setup_environment"],
      "external_dependencies": ["@storybook/nextjs"],
      "confidence_level": "High",
      "confidence_justification": "Creating story files is a low-risk scaffolding task.",
      "status": "DONE",
      "storybook_files": [
        "src/components/atoms/Button/Button.stories.tsx",
        "src/components/atoms/Input/Input.stories.tsx",
        "src/components/atoms/Icon/Icon.stories.tsx",
        "src/components/atoms/Badge/Badge.stories.tsx"
      ],
      "expected_test_failures": [
        "Storybook fails to render components because they do not exist.",
        "Visual regression baseline cannot be created."
      ]
    },
    {
      "id": "atoms_implementation",
      "type": "IMPLEMENTATION",
      "description": "Implement atomic design Level 1 components (Button, Input, Icon, Badge) with shadcn/ui base, TailwindCSS styling, mobile-first ergonomics, and TypeScript interfaces",
      "user_story_ref": "US004",
      "dependencies": ["atoms_jest_test_creation", "atoms_storybook_creation"],
      "external_dependencies": ["shadcn/ui", "class-variance-authority", "lucide-react"],
      "confidence_level": "High", 
      "confidence_justification": "Clear component specifications and established patterns from shadcn/ui",
      "status": "DONE",
      "implementation_files": [
        "src/components/atoms/Button/Button.tsx",
        "src/components/atoms/Button/index.ts",
        "src/components/atoms/Input/Input.tsx",
        "src/components/atoms/Input/index.ts",
        "src/components/atoms/Icon/Icon.tsx", 
        "src/components/atoms/Icon/index.ts",
        "src/components/atoms/Badge/Badge.tsx",
        "src/components/atoms/Badge/index.ts",
        "src/components/atoms/index.ts"
      ],
      "acceptance_criteria": [
        "All atom tests pass",
        "Touch targets meet 44px minimum requirement", 
        "Components support all specified variants and sizes",
        "TypeScript interfaces match specification",
        "Storybook stories render without errors"
      ]
    },
    {
      "id": "atoms_refactor",
      "type": "REFACTORING",
      "description": "Optimize atomic components for performance, extract common patterns, improve TypeScript types, and enhance Storybook documentation",
      "user_story_ref": "US004, US005",
      "dependencies": ["atoms_implementation"],
      "external_dependencies": [],
      "confidence_level": "High",
      "confidence_justification": "Refactoring well-tested components with clear performance targets",
      "status": "DONE",
      "refactoring_goals": [
        "Extract common variant patterns into shared utilities",
        "Optimize bundle size through tree-shaking",
        "Add comprehensive TypeScript documentation",
        "Enhance Storybook stories with interaction tests",
        "Ensure components are properly memoized for performance"
      ]
    },
    {
      "id": "molecules_jest_test_creation",
      "type": "TEST_CREATION",
      "description": "Create failing Jest/RTL tests for atomic design Level 2 components: SearchBar, MarkerPopup, ContributionForm with user interaction, state management, and integration coverage.",
      "user_story_ref": "US001, US002, US003",
      "dependencies": ["atoms_refactor"],
      "external_dependencies": ["Jest", "@testing-library/react", "@testing-library/user-event", "nock"],
      "confidence_level": "High",
      "confidence_justification": "Molecules composed of tested atoms with clear interaction patterns",
      "status": "VALIDATION_PASSED",
      "test_files": [
        "tests/components/molecules/SearchBar_test.tsx",
        "tests/components/molecules/MarkerPopup_test.tsx",
        "tests/components/molecules/ContributionForm_test.tsx"
      ],
      "expected_test_failures": [
        "SearchBar component not found",
        "Geolocation API integration fails",
        "Form validation logic missing",
        "MarkerPopup tooltip positioning fails"
      ]
    },
    {
      "id": "molecules_storybook_creation",
      "type": "TEST_CREATION",
      "description": "Create placeholder Storybook stories for atomic design Level 2 components (SearchBar, MarkerPopup, ContributionForm) to establish the visual test harness.",
      "user_story_ref": "US001, US002, US003",
      "dependencies": ["atoms_refactor"],
      "external_dependencies": ["@storybook/nextjs"],
      "confidence_level": "High",
      "confidence_justification": "Creating story files is a low-risk scaffolding task.",
      "status": "VALIDATION_PASSED",
      "storybook_files": [
        "src/components/molecules/SearchBar/SearchBar.stories.tsx",
        "src/components/molecules/MarkerPopup/MarkerPopup.stories.tsx",
        "src/components/molecules/ContributionForm/ContributionForm.stories.tsx"
      ],
      "expected_test_failures": [
        "Storybook fails to render components because they do not exist."
      ]
    },
    {
      "id": "molecules_implementation",
      "type": "IMPLEMENTATION",
      "description": "Implement atomic design Level 2 components (SearchBar, MarkerPopup, ContributionForm) with React Hook Form, geolocation integration, and ergonomic mobile positioning",
      "user_story_ref": "US001, US002, US003",
      "dependencies": ["molecules_jest_test_creation", "molecules_storybook_creation"],
      "external_dependencies": ["react-hook-form", "@hookform/resolvers"],
      "confidence_level": "Medium",
      "confidence_justification": "Molecules involve complex interactions and external API integrations (geolocation), which may have browser compatibility variations",
      "status": "PENDING",
      "implementation_files": [
        "src/components/molecules/SearchBar/SearchBar.tsx",
        "src/components/molecules/SearchBar/index.ts", 
        "src/components/molecules/MarkerPopup/MarkerPopup.tsx",
        "src/components/molecules/MarkerPopup/index.ts",
        "src/components/molecules/ContributionForm/ContributionForm.tsx",
        "src/components/molecules/ContributionForm/index.ts",
        "src/components/molecules/index.ts"
      ],
      "acceptance_criteria": [
        "All molecule tests pass",
        "SearchBar handles geolocation permissions gracefully",
        "MarkerPopup displays toilet details correctly",
        "ContributionForm validates all required fields", 
        "Components positioned for thumb-friendly access",
        "Form submission integrates with existing /api/suggest endpoint"
      ]
    },
    {
      "id": "molecules_refactor",
      "type": "REFACTORING",
      "description": "Optimize molecule components for mobile performance, improve error handling, enhance accessibility, and add comprehensive interaction testing",
      "user_story_ref": "US003, US004, US005",
      "dependencies": ["molecules_implementation"], 
      "external_dependencies": [],
      "confidence_level": "Medium",
      "confidence_justification": "Performance optimization on mobile devices can be unpredictable, may require iterative tuning based on real device testing",
      "refactoring_goals": [
        "Implement proper error boundaries for geolocation failures",
        "Add debounced search to reduce API calls",
        "Optimize form validation for mobile keyboards", 
        "Enhance screen reader support with live regions",
        "Add proper loading states and skeleton screens"
      ]
    },
    {
      "id": "map_organism_jest_test_creation",
      "type": "TEST_CREATION",
      "description": "Create failing Jest/RTL tests for MapView organism: React-Leaflet integration, marker clustering, user location, toilet data rendering, and mobile touch interactions.",
      "user_story_ref": "US001, US002",
      "dependencies": ["molecules_refactor"],
      "external_dependencies": ["Jest", "@testing-library/react", "leaflet", "react-leaflet"],
      "confidence_level": "Medium",
      "confidence_justification": "MapView involves complex third-party library integration (Leaflet) and geospatial calculations which may have browser-specific behaviors",
      "test_files": [
        "tests/components/organisms/MapView_test.tsx",
        "tests/components/organisms/MapView_integration_test.tsx"
      ],
      "expected_test_failures": [
        "MapView component not found",
        "Leaflet map initialization fails",
        "Marker clustering not working",
        "Touch gesture handling missing",
        "GeoJSON data loading fails"
      ]
    },
    {
      "id": "map_organism_storybook_creation",
      "type": "TEST_CREATION",
      "description": "Create placeholder Storybook story for MapView organism.",
      "user_story_ref": "US001, US002",
      "dependencies": ["molecules_refactor"],
      "external_dependencies": ["@storybook/nextjs"],
      "confidence_level": "High",
      "confidence_justification": "Creating story files is a low-risk scaffolding task.",
      "storybook_files": [
        "src/components/organisms/MapView/MapView.stories.tsx"
      ],
      "expected_test_failures": [
        "Storybook fails to render MapView component because it does not exist."
      ]
    },
    {
      "id": "map_organism_implementation",
      "type": "IMPLEMENTATION",
      "description": "Implement MapView organism with React-Leaflet, marker clustering, real toilet data integration, mobile-optimized controls, and ergonomic positioning",
      "user_story_ref": "US001, US002",
      "dependencies": ["map_organism_jest_test_creation", "map_organism_storybook_creation"],
      "external_dependencies": ["react-leaflet", "leaflet", "react-leaflet-markercluster"],
      "confidence_level": "Medium",
      "confidence_justification": "MapView requires integration with complex mapping library and real GeoJSON data. Touch gesture handling on mobile devices may need device-specific adjustments",
      "implementation_files": [
        "src/components/organisms/MapView/MapView.tsx",
        "src/components/organisms/MapView/index.ts",
        "src/hooks/useToiletData.ts",
        "src/hooks/useUserLocation.ts",
        "src/components/organisms/index.ts"
      ],
      "acceptance_criteria": [
        "Map renders with 1,041+ London toilet markers",
        "Marker clustering works at different zoom levels",
        "User location displayed with blue dot", 
        "Map controls positioned in bottom-right thumb zone",
        "Touch gestures (pan, zoom) work smoothly",
        "Markers show color-coded availability status",
        "Performance remains smooth with 1,000+ markers"
      ]
    },
    {
      "id": "map_organism_refactor", 
      "type": "REFACTORING",
      "description": "Optimize MapView for mobile performance, implement proper memory management, enhance clustering algorithm, and improve touch responsiveness",
      "user_story_ref": "US001, US005",
      "dependencies": ["map_organism_implementation"],
      "external_dependencies": [],
      "confidence_level": "Low",
      "confidence_justification": "Map performance optimization is highly dependent on device capabilities and can be unpredictable. Memory management with large datasets may require extensive testing and iteration",
      "refactoring_goals": [
        "Implement marker virtualization for better performance",
        "Optimize clustering algorithm for mobile devices",
        "Add proper cleanup for Leaflet map instances",
        "Implement progressive loading of markers",
        "Enhance touch gesture responsiveness",
        "Add proper error handling for map loading failures"
      ]
    },
    {
      "id": "modal_organism_jest_test_creation",
      "type": "TEST_CREATION",
      "description": "Create failing Jest/RTL tests for SuggestionModal organism: modal behavior, form integration, mobile UX, accessibility focus management, and API integration.",
      "user_story_ref": "US003, US004",
      "dependencies": ["map_organism_refactor"],
      "external_dependencies": ["Jest", "@testing-library/react", "@testing-library/user-event"],
      "confidence_level": "High",
      "confidence_justification": "Modal components have well-established patterns and testable behaviors",
      "test_files": [
        "tests/components/organisms/SuggestionModal_test.tsx"
      ],
      "expected_test_failures": [
        "SuggestionModal component not found",
        "Modal focus management fails",
        "Form submission integration missing",
        "Mobile-friendly layout not implemented",
        "Accessibility attributes missing"
      ]
    },
    {
      "id": "modal_organism_storybook_creation",
      "type": "TEST_CREATION",
      "description": "Create placeholder Storybook story for SuggestionModal organism.",
      "user_story_ref": "US003, US004",
      "dependencies": ["map_organism_refactor"],
      "external_dependencies": ["@storybook/nextjs"],
      "confidence_level": "High",
      "confidence_justification": "Creating story files is a low-risk scaffolding task.",
      "storybook_files": [
        "src/components/organisms/SuggestionModal/SuggestionModal.stories.tsx"
      ],
      "expected_test_failures": [
        "Storybook fails to render SuggestionModal component because it does not exist."
      ]
    },
    {
      "id": "modal_organism_implementation",
      "type": "IMPLEMENTATION",
      "description": "Implement SuggestionModal organism with focus management, mobile-optimized form layout, API integration, and accessibility compliance",
      "user_story_ref": "US003, US004", 
      "dependencies": ["modal_organism_jest_test_creation", "modal_organism_storybook_creation"],
      "external_dependencies": ["@radix-ui/react-dialog", "@radix-ui/react-toast"],
      "confidence_level": "High",
      "confidence_justification": "Modal implementation uses proven Radix UI primitives with established accessibility patterns",
      "implementation_files": [
        "src/components/organisms/SuggestionModal/SuggestionModal.tsx",
        "src/components/organisms/SuggestionModal/index.ts"
      ],
      "acceptance_criteria": [
        "Modal opens/closes with proper focus management",
        "Form layout optimized for mobile thumbs",
        "Integration with existing /api/suggest endpoint",
        "Proper error handling and user feedback",
        "WCAG 2.1 AA compliance verified",
        "Success toast shown after submission"
      ]
    },
    {
      "id": "modal_organism_refactor",
      "type": "REFACTORING",
      "description": "Optimize modal for mobile performance, enhance error handling, improve form validation UX, and ensure robust accessibility",
      "user_story_ref": "US003, US004",
      "dependencies": ["modal_organism_implementation"],
      "external_dependencies": [],
      "confidence_level": "High",
      "confidence_justification": "Modal refactoring focuses on well-understood UX patterns and accessibility improvements",
      "refactoring_goals": [
        "Implement proper modal stacking for nested modals",
        "Add keyboard shortcuts for power users",
        "Enhance form validation with real-time feedback",
        "Optimize modal animations for lower-end devices",
        "Improve error messaging with actionable suggestions"
      ]
    },
    {
      "id": "layout_template_jest_test_creation",
      "type": "TEST_CREATION",
      "description": "Create failing Jest/RTL tests for HomeLayout template: responsive layout, component composition, mobile navigation, and overall user flow integration.",
      "user_story_ref": "US001, US005",
      "dependencies": ["modal_organism_refactor"],
      "external_dependencies": ["Jest", "@testing-library/react"],
      "confidence_level": "High",
      "confidence_justification": "Layout templates are compositional and have predictable testing patterns",
      "test_files": [
        "tests/components/templates/HomeLayout_test.tsx"
      ],
      "expected_test_failures": [
        "HomeLayout component not found",
        "Responsive layout breakpoints not working",
        "Component composition fails",
        "Mobile navigation not implemented"
      ]
    },
    {
      "id": "layout_template_storybook_creation",
      "type": "TEST_CREATION",
      "description": "Create placeholder Storybook story for the HomeLayout template.",
      "user_story_ref": "US001, US005",
      "dependencies": ["modal_organism_refactor"],
      "external_dependencies": ["@storybook/nextjs"],
      "confidence_level": "High",
      "confidence_justification": "Creating story files is a low-risk scaffolding task.",
      "storybook_files": [
        "src/components/templates/HomeLayout/HomeLayout.stories.tsx"
      ],
      "expected_test_failures": [
        "Storybook fails to render HomeLayout component because it does not exist."
      ]
    },
    {
      "id": "layout_template_implementation",
      "type": "IMPLEMENTATION",
      "description": "Implement HomeLayout template with responsive design, mobile-first navigation, proper component composition, and performance optimization",
      "user_story_ref": "US001, US005",
      "dependencies": ["layout_template_jest_test_creation", "layout_template_storybook_creation"],
      "external_dependencies": [],
      "confidence_level": "High",
      "confidence_justification": "Layout implementation follows established responsive design patterns",
      "implementation_files": [
        "src/components/templates/HomeLayout/HomeLayout.tsx",
        "src/components/templates/HomeLayout/index.ts",
        "src/components/templates/index.ts"
      ],
      "acceptance_criteria": [
        "Layout responsive across all breakpoints (320px-1280px)",
        "Mobile navigation optimized for thumb access",
        "Proper composition of organisms and molecules",
        "Performance optimized for 3G mobile loading",
        "Safe area handling for modern mobile devices"
      ]
    },
    {
      "id": "layout_template_refactor",
      "type": "REFACTORING",
      "description": "Optimize layout for performance, improve responsive behavior, enhance mobile UX, and ensure cross-device compatibility",
      "user_story_ref": "US005",
      "dependencies": ["layout_template_implementation"],
      "external_dependencies": [],
      "confidence_level": "Medium",
      "confidence_justification": "Cross-device compatibility can be unpredictable and may require iterative testing across different mobile devices",
      "refactoring_goals": [
        "Implement proper viewport handling for different devices",
        "Optimize layout shifts for better Core Web Vitals", 
        "Add proper loading states for layout components",
        "Enhance touch target spacing for better ergonomics",
        "Implement proper dark mode support"
      ]
    },
    {
      "id": "home_page_test_creation",
      "type": "TEST_CREATION",
      "description": "Create failing tests for home page: Next.js App Router integration, full user flow testing, state management, and end-to-end toilet discovery workflow",
      "user_story_ref": "US001, US002, US003",
      "dependencies": ["layout_template_refactor"],
      "external_dependencies": ["Jest", "@testing-library/react", "next", "@tanstack/react-query"],
      "confidence_level": "Medium",
      "confidence_justification": "End-to-end page testing involves multiple integrated systems and may have timing-sensitive interactions",
      "test_files": [
        "tests/pages/home_page_test.tsx",
        "tests/integration/toilet_discovery_flow_test.tsx"
      ],
      "expected_test_failures": [
        "Home page not found",
        "State management not initialized",
        "Toilet discovery flow incomplete",
        "API integration not working",
        "User location handling fails"
      ]
    },
    {
      "id": "home_page_implementation",
      "type": "IMPLEMENTATION",
      "description": "Implement Next.js home page with state management, API integration, user location handling, and complete toilet discovery workflow",
      "user_story_ref": "US001, US002, US003",
      "dependencies": ["home_page_test_creation"],
      "external_dependencies": ["@tanstack/react-query", "zustand"],
      "confidence_level": "Medium",
      "confidence_justification": "Page implementation requires coordination of multiple systems (state, API, geolocation) which may have browser-specific behaviors",
      "implementation_files": [
        "src/app/page.tsx",
        "src/app/layout.tsx",
        "src/app/globals.css",
        "src/store/useAppStore.ts",
        "src/lib/queryClient.ts"
      ],
      "acceptance_criteria": [
        "Home page loads within 3 seconds on 3G",
        "Map displays 1,041+ toilet markers",
        "User location detection works with permissions",
        "Complete toilet discovery flow functional",
        "State management properly initialized",
        "API integration working with existing endpoints"
      ]
    },
    {
      "id": "home_page_refactor",
      "type": "REFACTORING", 
      "description": "Optimize home page performance, improve error handling, enhance mobile UX, implement proper SEO, and ensure production readiness",
      "user_story_ref": "US005",
      "dependencies": ["home_page_implementation"],
      "external_dependencies": [],
      "confidence_level": "Medium",
      "confidence_justification": "Performance optimization and SEO implementation may require iterative tuning and A/B testing to achieve target metrics",
      "refactoring_goals": [
        "Implement proper meta tags and SEO optimization",
        "Add error boundaries for production robustness",
        "Optimize bundle splitting and code loading",
        "Implement proper analytics tracking",
        "Add comprehensive error logging",
        "Ensure Core Web Vitals meet target thresholds"
      ]
    },
    {
      "id": "e2e_integration_test_creation",
      "type": "TEST_CREATION",
      "description": "Create comprehensive end-to-end integration tests covering complete user journeys, cross-browser compatibility, and mobile device testing",
      "user_story_ref": "US001, US002, US003, US004, US005",
      "dependencies": ["home_page_refactor"],
      "external_dependencies": ["Jest", "@testing-library/react", "nock", "supertest"],
      "confidence_level": "High",
      "confidence_justification": "Integration tests validate well-defined user flows with established testing patterns",
      "test_files": [
        "tests/integration/toilet_discovery_complete_flow_test.tsx",
        "tests/integration/contribution_workflow_test.tsx", 
        "tests/integration/accessibility_compliance_test.tsx",
        "tests/integration/mobile_performance_test.tsx"
      ],
      "expected_test_failures": [
        "Complete user flow not implemented",
        "Cross-component state management fails",
        "Mobile performance targets not met",
        "Accessibility compliance incomplete"
      ]
    },
    {
      "id": "e2e_integration_implementation",
      "type": "IMPLEMENTATION",
      "description": "Implement comprehensive integration test suite with real data scenarios, performance validation, and accessibility verification",
      "user_story_ref": "US001, US002, US003, US004, US005",
      "dependencies": ["e2e_integration_test_creation"],
      "external_dependencies": [],
      "confidence_level": "High",
      "confidence_justification": "Integration test implementation follows established patterns and validates existing functionality",
      "acceptance_criteria": [
        "All user stories validated end-to-end",
        "Performance targets verified (< 3s load on 3G)",
        "WCAG 2.1 AA compliance confirmed",
        "Mobile ergonomics validated across devices",
        "API integration tested with real data scenarios",
        "Error handling verified for all failure modes"
      ]
    },
    {
      "id": "production_optimization_refactor",
      "type": "REFACTORING",
      "description": "Final production optimization: bundle analysis, performance tuning, security hardening, monitoring setup, and deployment preparation",
      "user_story_ref": "US005",
      "dependencies": ["e2e_integration_implementation"],
      "external_dependencies": [],
      "confidence_level": "Medium",
      "confidence_justification": "Production optimization may reveal unexpected performance bottlenecks that require iterative solutions",
      "refactoring_goals": [
        "Conduct comprehensive bundle size analysis",
        "Implement proper Content Security Policy",
        "Add performance monitoring and analytics", 
        "Optimize images and static assets",
        "Implement proper caching strategies",
        "Add comprehensive error tracking",
        "Ensure proper TypeScript coverage",
        "Validate all Core Web Vitals targets"
      ]
    }
  ]
}
You are correct to insist on a structured approach. Given that we have just concluded an exhaustive debugging cycle, it is crucial that we proceed methodically.

Here is the phased approach I recommend to address the identified issues, ensuring we build on our recent progress without introducing new instability:

### **Phase 1: Knowledge Capture & Solidification (Immediate Next Step)**

**Action:** Execute the existing documentation plan: `plan_docs_update_from_debugging_0064.txt`.

**Rationale:** The highest priority is to capture and codify the hard-won knowledge from the `ContributionForm` debugging saga. If we immediately dive into new code changes, we risk losing the nuances of the solutions we just implemented. This documentation will serve as the new, validated standard for future work.

**Order of Execution:**
1.  **Task 1:** `update_api_testing_guide` (Update `docs/howto/test-api-endpoints.md`).
2.  **Task 2:** `create_zod_recipe` (Create `docs/cookbook/recipe_react_hook_form_with_zod.md`).
3.  **Task 3:** `create_robust_testing_recipe` (Create `docs/cookbook/recipe_robust_react_testing.md`).

### **Phase 2: Critical Bug Fix - Dropped Data Payload (After Phase 1)**

**Action:** Create and execute a new, focused plan to fix the data being dropped from the `ContributionForm` payload.

**Rationale:** This is a high-severity functional bug. The user-facing UI allows for input that is being silently discarded. This must be fixed before any further refactoring. We will follow a strict TDD cycle.

**Proposed Plan (`plan_fix_contributionform_payload_0065.txt`):**

1.  **Task 1: `TEST_CREATION` (Red)**
    *   **Action:** I will add a new test to `tests/components/molecules/ContributionForm_test.tsx`.
    *   **Description:** This test will enable feature flags (e.g., "Baby Change," "Contactless Payment") and submit the form. It will then **assert** that the `fetch` mock was called with a payload containing the correctly mapped and non-empty feature fields (e.g., `{ changing_table: true, payment_contactless: true }`).
    *   **Expected Outcome:** This test will fail because the current implementation does not send this data.

2.  **Task 2: `IMPLEMENTATION` (Green)**
    *   **Action:** I will modify `src/components/molecules/ContributionForm/ContributionForm.tsx`.
    *   **Description:** I will update the `handleFormSubmit` function to correctly map the `features` object from the component's state to the API `requestBody`, ensuring the data structure matches the `suggest-api.md` documentation.
    *   **Expected Outcome:** The new test will pass.

3.  **Task 3: `REFACTORING` (Refactor)**
    *   **Action:** I will clean up the implementation and test code, ensuring all 26 existing tests for the component continue to pass.

### **Phase 3: Technical Debt Refactor - Upgrade to API v2 (After Phase 2)**

**Action:** Create and execute a plan to upgrade the `ContributionForm` to use the production-intended `/api/v2/suggest` endpoint.

**Rationale:** With the immediate bug fixed, we can now address the technical debt of using the obsolete v1 API. This improves data integrity and aligns the component with the documented project architecture.

**Proposed Plan (`plan_refactor_contributionform_apiv2_0066.txt`):**

1.  **Task 1: `TEST_REFACTORING` (Red)**
    *   **Action:** I will update the Jest `fetch` mock in `tests/components/molecules/ContributionForm_test.tsx`.
    *   **Description:** The mock will be changed to intercept calls to `/api/v2/suggest` instead of `/api/v1/suggest`. This change will immediately break the existing API integration tests, placing us in the 'Red' state.

2.  **Task 2: `IMPLEMENTATION` (Green)**
    *   **Action:** I will update the `endpoint` variable in `src/components/molecules/ContributionForm/ContributionForm.tsx` to target `/api/v2/suggest`.
    *   **Description:** This change will make the refactored tests pass again. It may also require adding default values for newly required fields in the test payloads to satisfy the stricter v2 validation.

### **Summary of Sequence:**

1.  **Execute Documentation Plan:** Solidify learnings.
2.  **Fix Payload Bug:** Correct the immediate data loss issue.
3.  **Refactor to API v2:** Pay down technical debt and align with production standards.

This sequence prioritizes stability, captures critical knowledge, fixes user-facing bugs first, and then addresses architectural improvements.

I will now begin with **Phase 1, Task 1**: Updating the API testing guide.
/**
 * Discord Alert Sender
 * 
 * @doc refs docs/architecture-spec.md#monitor-agent
 * 
 * Implements AlertSender interface for Discord webhook notifications.
 * Formats monitoring data into Discord-compatible Markdown messages.
 */

import fetch from 'node-fetch';
import { AlertSender, AlertData, AlertSendResult } from '../../interfaces/AlertSender';
import { createAgentLogger } from '../../utils/logger';

const logger = createAgentLogger('discord-alert-sender');

export class DiscordAlertSender implements AlertSender {
  private webhookUrl: string;

  constructor(webhookUrl: string) {
    this.webhookUrl = webhookUrl;
  }

  async sendAlert(data: AlertData): Promise<AlertSendResult> {
    try {
      const summary = this.generateSummary(data);
      
      const payload = {
        content: summary
      };
      
      const response = await fetch(this.webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });
      
      if (!response.ok) {
        throw new Error(`Discord webhook failed: ${response.status} ${response.statusText}`);
      }
      
      logger.info('discord_sent', 'Discord notification sent successfully', {
        week: data.week,
        webhookUrl: this.webhookUrl.substring(0, 50) + '...'
      });
      
      return {
        success: true,
        channelName: 'discord'
      };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      
      logger.error('discord_failed', 'Failed to send Discord notification', {
        error: errorMessage,
        week: data.week
      });
      
      return {
        success: false,
        error: errorMessage,
        channelName: 'discord'
      };
    }
  }

  getChannelName(): string {
    return 'discord';
  }

  isConfigured(): boolean {
    return this.webhookUrl.trim() !== '';
  }

  /**
   * Generate Markdown summary for Discord notification
   */
  private generateSummary(data: AlertData): string {
    const errorRatePercent = Math.round(data.errorRate * 100);
    
    return `ðŸ“Š **CityPee Weekly Monitor Report**

**Week:** ${data.week}
**New Toilets:** ${data.newToilets}
**Removed Toilets:** ${data.removedToilets}
**Suggestions:** ${data.suggestSubmissions}
**Error Rate:** ${errorRatePercent}%
**P95 Latency:** ${data.p95Latency}ms

Generated by monitor-agent ðŸ¤–`;
  }
}